#!/usr/bin/env python

#
#
# MIT License
#
# Copyright (c) 2017 Krzysztof Magosa <krzysztof@magosa.pl>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

#
# Nagios check for PHP FPM
# Visit: https://github.com/krzysztof-magosa/nagios-plugins
#

import os
import re
import json
import argparse
import subprocess


OK = 0
WARN = 1
CRIT = 2
UNKN = 3


def extract_ref(thresholds_spec, n):
    thresholds = thresholds_spec.split(",")

    m = re.match(r"([!=<>]+)(.+)", thresholds[n])
    return int(m.group(2))


def extract_warn(thresholds_spec):
    if "," in thresholds_spec:
        return extract_ref(thresholds_spec, 0)
    else:
        return ""


def extract_crit(thresholds_spec):
    return extract_ref(thresholds_spec, -1)


def verify_threshold(value, threshold_spec):
    m = re.match(r"([!=<>]+)(.+)", threshold_spec)
    sign = m.group(1)
    ref = m.group(2)

    if isinstance(value, int):
        ref = int(ref)

    if sign == "!=":
        return value != ref
    elif sign == "<":
        return value < ref
    elif sign == "<=":
        return value < ref
    elif sign == ">":
        return value > ref
    elif sign == ">=":
        return value > ref
    else:
        raise RuntimeError("Unsupported condition")


def verify_thresholds(value, thresholds_spec):
    thresholds = thresholds_spec.split(",")

    if verify_threshold(value, thresholds[-1]):
        return CRIT
    elif verify_threshold(value, thresholds[0]):
        return WARN
    else:
        return OK


parser = argparse.ArgumentParser()
parser.add_argument("--host", default="127.0.0.1")
parser.add_argument("--port", type=int, default="9000")
parser.add_argument("--path", default="/status")
parser.add_argument("--active-processes", default=">80,>100")
parser.add_argument("--listen-queue", default=">3,>10")
args = parser.parse_args()


my_env = os.environ
my_env["SCRIPT_NAME"] = args.path
my_env["SCRIPT_FILENAME"] = args.path
my_env["REQUEST_METHOD"] = "GET"
my_env["QUERY_STRING"] = "json"

proc = subprocess.Popen(
    [
        "cgi-fcgi",
        "-bind",
        "-connect",
        "{}:{}".format(args.host, args.port)
    ],
    env=my_env,
    stdout=subprocess.PIPE,
    stderr=subprocess.PIPE
)

out, err = proc.communicate()
out = out.replace("\r", "")

if err != "":
    print("ERROR: {}".format(err))
    exit(UNKN)

_headers, body = out.split("\n\n", 1)
parameters = json.loads(body)

#

conditions = [
    (
        parameters["active processes"],
        args.active_processes
    ),
    (
        parameters["listen queue"],
        args.listen_queue
    )
]

overall_status = OK
for cond in conditions:
    status = verify_thresholds(cond[0], cond[1])
    overall_status = max(overall_status, status)

#

human_status = [
    "active processes: {}".format(parameters["active processes"]),
    "idle processes: {}".format(parameters["idle processes"]),
    "listen queue: {}".format(parameters["listen queue"])
]

#

graph_status = [
    "active_processes={};{};{};".format(
        parameters["active processes"],
        extract_warn(args.active_processes),
        extract_crit(args.active_processes)
    ),
    "idle_processes={};;;".format(
        parameters["idle processes"]
    ),
    "listen_queue={};{};{};".format(
        parameters["listen queue"],
        extract_warn(args.listen_queue),
        extract_crit(args.listen_queue)
    )
]

print(
    "{}|{}".format(
        ", ".join(human_status),
        " ".join(graph_status)
    )
)

exit(overall_status)
